{
  "hash": "a1751bd60cb3c69931cf2f4407a7b397",
  "result": {
    "markdown": "---\ntitle: \"Probit\"\n---\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nThe Probit model classifies observations into one of two categories (for simple Probit Regression; multinomial Probit Regression can classify observations into more than two categories) by estimating the probability that an observation with particular characteristics is more likely to fall in one category or another.\n\n## Uses\n\nProbit Regression is primarily used when the outcome is binary - thus, it is mainly used for classification problems. When covariates are continuous, there are infinite possible values for the outcome if using Linear Regression; Logistic and Probit Regressions are therefore better than Linear if we need to bound the outcome to 0 and 1.\n\nLogistic Regression and Probit Regressions give almost identical results - they just have different link functions. The decision to chose one over the other is discipline-dependent, and it is said that Logistic Regression is better when one has extreme independent variables (where one particular small or large value will overwhelmingly determine if your outcome is 0 or 1 - overriding the effect of most other variables). However, there is no 'right' answer to this debate.\n\n## Assumptions\n\n-   The outcome is binary\n-   The z-score of the outcome and the predictor variables have a linear relationship\n-   The errors are normally distributed and are independent of one another\n\n## Our Probit Regression Implementation\n\nOur Probit Regression implementation: (Note that we use bootstrapping to estimate standard errors)\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nprobit_regression <- function(data, ..., y) {\n  n <- nrow(data)\n  x_parameters <- c(...)\n  # defining the predictor matrix\n  X <-\n    matrix(c(rep(1, n), x_parameters),\n      nrow = n,\n      ncol = ncol(data)\n    )\n  # defining the outcome matrix\n  Y <- matrix(y, nrow = n, ncol = 1)\n  # defining the log likelihood\n  probit.loglikelihood <- function(beta, X, Y) {\n    eta <- X %*% beta\n    p <- pnorm(eta)\n    loglikelihood <- -sum((1 - Y) * log(1 - p) + Y * log(p))\n    return(loglikelihood)\n  }\n  # starting with an initial guess of the parameter values\n  initial_guess <- matrix(0, nrow = ncol(data), ncol = 1)\n  # using 'optim' to maximize the log likelihood\n  result <- optim(\n    initial_guess,\n    fn = probit.loglikelihood,\n    X = X,\n    Y = Y,\n    method = NULL\n  )$par\n  # creating a vector 'estimate' for the beta coefficients\n  estimate <- result\n  # bootstrapping to estimate the standard errors\n  num_bootstraps <- 10\n  result_bootstrap <-\n    matrix(0, nrow = num_bootstraps, ncol = ncol(X))\n  for (i in 1:num_bootstraps) {\n    sample_indices <- sample(nrow(data), replace = TRUE)\n    bootstrap_data <- data[sample_indices, ]\n    X_bootstrap <-\n      matrix(\n        c(rep(1, nrow(bootstrap_data)), x_parameters),\n        nrow = nrow(bootstrap_data),\n        ncol = ncol(bootstrap_data)\n      )\n    Y_bootstrap <-\n      matrix(bootstrap_data$y,\n        nrow = nrow(bootstrap_data),\n        ncol = 1\n      )\n    initial_guess_bootstrap <-\n      matrix(0, nrow = ncol(bootstrap_data), ncol = 1)\n    result_bootstrap[i, ] <- optim(\n      initial_guess_bootstrap,\n      probit.loglikelihood,\n      X = X_bootstrap,\n      Y = Y_bootstrap,\n      method = NULL\n    )$par\n  }\n  # finding the standard deviation of the bootstrapped betas to find the\n  # standard error of the coefficients\n  se <- apply(result_bootstrap, 2, sd)\n  # calculating the z-statistic\n  z <- estimate / se\n  # defining the degrees of freedom\n  df <- nrow(X) - ncol(X)\n  # calculating the p-value\n  p <- 2 * pnorm(z, lower.tail = FALSE)\n  # defining the row names of the output data frame\n  rownames <- c()\n  for (i in 1:((ncol(X)) - 1)) {\n    rownames[i] <- i\n  }\n  data_to_plot <- data[, -which(colnames(data) == \"y\")]\n  data_to_plot$y_zscore <- qnorm(pnorm(data$y))\n  test <- list(\n    pairs(data_to_plot, main = \"Assessing Linearity of Predictors\\n with z score of Outcome\")\n  )\n  impl <- data.frame(\n    Estimate = estimate,\n    Std.Error = se,\n    z.value = z,\n    p.value = p,\n    DegOfFreedom = c(df, rep(NA, ncol(X) - 1)),\n    row.names = c(\"(Intercept)\", paste0(rep(\"x\", ncol(\n      X\n    ) - 1), rownames))\n  )\n  # returning a data frame akin to the glm probit output\n  return(list(test, impl))\n}\n```\n:::\n\n\nCreating a function to predict the outcomes based on our Probit Regression implementation.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\npredict_probit <-\n  function(data, ..., y, implementation_probit) {\n    n <-\n      implementation_probit$DegOfFreedom[1] + nrow(implementation_probit)\n    input_covariate_values <- c(...)\n    X <-\n      matrix(\n        c(rep(1, n), input_covariate_values),\n        nrow = n,\n        ncol = nrow(implementation_probit)\n      )\n    Y <- matrix(y, nrow = n, ncol = 1)\n    estimate <-\n      implementation_probit[1:nrow(implementation_probit), 1]\n    pred <- ifelse(X %*% estimate < 0, 0, 1)\n    return(pred)\n  }\n```\n:::\n\n\nCreating a test data set which meets all Probit Regression assumptions to check if our function works.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\ntest_probit_regression_data <- data.frame(\n  x1 = rnorm(1000, 0, 1),\n  x2 = rnorm(1000, 0, 1)\n)\nerror <- rnorm(1000, mean = 0, sd = 0.5)\ntest_probit_regression_data$y <- test_probit_regression_data$x1 +\n  0.5 * test_probit_regression_data$x2 +\n  error\ntest_probit_regression_data$y <-\n  qnorm(pnorm(test_probit_regression_data$y))\n\nplot(test_probit_regression_data$x1, test_probit_regression_data$y,\n  main = \"The z score of y and x1 have a linear relationship\", cex.main = 0.6,\n  xlab = \"x1\", ylab = \"y\"\n)\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-4-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nplot(test_probit_regression_data$x1, test_probit_regression_data$y,\n  main = \"The z score of y and x2 have a linear relationship\", cex.main = 0.6,\n  xlab = \"x2\", ylab = \"y\"\n)\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-4-2.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\ntest_probit_regression_data$y <-\n  ifelse(test_probit_regression_data$y < 0, 0, 1)\n\nplot(density(error), main = \"Errors are normally distributed\")\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-4-3.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\n## Testing Assumptions for Probit Regression\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\ntest_probit_reg <- probit_regression(test_probit_regression_data,\n  test_probit_regression_data$x1,\n  test_probit_regression_data$x2,\n  y = test_probit_regression_data$y\n)[[1]]\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-5-1.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\nApplying the function we created on this data set.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nour_implementation_probit <-\n  probit_regression(\n    test_probit_regression_data,\n    test_probit_regression_data$x1,\n    test_probit_regression_data$x2,\n    y = test_probit_regression_data$y\n  )[[2]]\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-6-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nour_implementation_probit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Estimate  Std.Error   z.value       p.value DegOfFreedom\n(Intercept) -0.09036983 0.04232593 -2.135094  1.967247e+00          997\nx1           1.99232295 0.03188065 62.493167  0.000000e+00           NA\nx2           1.03345197 0.04472044 23.109165 3.744892e-118           NA\n```\n:::\n:::\n\n\nComparing our output to R's output.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nr_implementation_probit <-\n  summary(glm(y ~ x1 + x2,\n    data = test_probit_regression_data,\n    family = binomial(link = \"probit\")\n  ))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n\n```{.r .cell-code}\nr_implementation_probit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = y ~ x1 + x2, family = binomial(link = \"probit\"), \n    data = test_probit_regression_data)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-2.82426  -0.34561  -0.00006   0.40909   2.68617  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) -0.09085    0.05918  -1.535    0.125    \nx1           1.99294    0.12348  16.139   <2e-16 ***\nx2           1.03360    0.08103  12.756   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1386.23  on 999  degrees of freedom\nResidual deviance:  586.45  on 997  degrees of freedom\nAIC: 592.45\n\nNumber of Fisher Scoring iterations: 7\n```\n:::\n:::\n\n\nWe note that the results are similar.\n\nWe followed all assumptions of Probit Regression in regressing y on x1 and x2 using the test_probit_regression_data data set. We will compare the residual of this regression to that of all the others where assumptions will be broken.\n\nThe accuracy for where all assumptions are met:\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nprediction_all_assumptions_met <-\n  as.numeric(\n    predict_probit(\n      test_probit_regression_data,\n      test_probit_regression_data$x1,\n      test_probit_regression_data$x2,\n      y = test_probit_regression_data$y,\n      implementation_probit = our_implementation_probit\n    )\n  )\naccuracy_all_assumptions_met <-\n  sum(prediction_all_assumptions_met == test_probit_regression_data$y) / 1000\naccuracy_all_assumptions_met # high accuracy here\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.873\n```\n:::\n:::\n\n\n## Breaking Assumptions\n\n### Breaking the assumption that the relationship between the predictors and the z score of y is linear\n\nCreating a data set where, if we apply Probit Regression, this assumption will be broken.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\ntest_probit_regression_data_not_linear <-\n  data.frame(\n    x1 = rnorm(1000, 0, 1),\n    x2 = rnorm(1000, 0, 1)\n  )\neror <- rnorm(1000, mean = 0, sd = 0.5)\ntest_probit_regression_data_not_linear$y <-\n  test_probit_regression_data_not_linear$x1^2 + error\ntest_probit_regression_data_not_linear$y <-\n  qnorm(pnorm(test_probit_regression_data_not_linear$y))\n\nplot(test_probit_regression_data_not_linear$x1, test_probit_regression_data_not_linear$y,\n  main = \"The z score of y and x1 \\ndo not have a linear relationship\",\n  xlab = \"x1\", ylab = \"y\"\n)\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-9-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\ntest_probit_regression_data_not_linear$y <-\n  ifelse(test_probit_regression_data_not_linear$y < 0, 0, 1)\n```\n:::\n\n\nUsing our implementation of glm Probit to fit the model and get an accuracy measure.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nour_implementation_probit_not_linear <-\n  probit_regression(\n    test_probit_regression_data_not_linear,\n    test_probit_regression_data_not_linear$x1,\n    test_probit_regression_data_not_linear$x2,\n    y = test_probit_regression_data_not_linear$y\n  )[[2]]\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-10-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nprediction_not_linear <-\n  as.numeric(\n    predict_probit(\n      test_probit_regression_data_not_linear,\n      test_probit_regression_data_not_linear$x1,\n      test_probit_regression_data_not_linear$x2,\n      y = test_probit_regression_data_not_linear$y,\n      implementation_probit = our_implementation_probit_not_linear\n    )\n  )\naccuracy_not_linear <-\n  sum(prediction_not_linear == test_probit_regression_data_not_linear$y) / 1000\naccuracy_not_linear # lower accuracy here\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.777\n```\n:::\n:::\n\n\nWe note that Probit Regression is not performing as well in this case.\n\n### Breaking the assumption that the errors are normally distributed\n\nCreating a data set where, if we apply Probit Regression, this assumption will be broken.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\ntest_probit_regression_data_not_normally_dist <-\n  data.frame(\n    x1 = rnorm(1000, 0, 1),\n    x2 = rnorm(1000, 0, 1)\n  )\nerror <- runif(1000, min = -1, max = 1)\ntest_probit_regression_data_not_normally_dist$y <-\n  test_probit_regression_data_not_normally_dist$x1 + error\ntest_probit_regression_data_not_normally_dist$y <-\n  qnorm(pnorm(test_probit_regression_data_not_normally_dist$y))\n\nplot(density(error), main = \"Errors are not normally distributed\")\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-11-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\ntest_probit_regression_data_not_normally_dist$y <-\n  ifelse(test_probit_regression_data_not_normally_dist$y < 0, 0, 1)\n```\n:::\n\n\nUsing our implementation of glm Probit to fit the model and get an accuracy measure.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nour_implementation_probit_not_normally_dist <-\n  probit_regression(\n    test_probit_regression_data_not_normally_dist,\n    test_probit_regression_data_not_normally_dist$x1,\n    test_probit_regression_data_not_normally_dist$x2,\n    y = test_probit_regression_data_not_normally_dist$y\n  )[[2]]\n```\n\n::: {.cell-output-display}\n![](probit_files/figure-html/unnamed-chunk-12-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nprediction_not_normally_dist <-\n  as.numeric(\n    predict_probit(\n      test_probit_regression_data_not_normally_dist,\n      test_probit_regression_data_not_normally_dist$x1,\n      test_probit_regression_data_not_normally_dist$x2,\n      y = test_probit_regression_data_not_normally_dist$y,\n      implementation_probit = our_implementation_probit_not_normally_dist\n    )\n  )\naccuracy_not_normally_dist <-\n  sum(prediction_not_normally_dist == test_probit_regression_data_not_normally_dist$y) / 1000\naccuracy_not_normally_dist # lower accuracy here\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.814\n```\n:::\n:::\n\n\nWe note that Probit Regression is not performing as well in this case.\n\n## Comparing accuracies when all assumptions were met versus not\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\naccuracy_comparison <-\n  t(\n    data.frame(\n      accuracy_all_assumptions_met,\n      accuracy_not_linear,\n      accuracy_not_normally_dist\n    )\n  )\nrow.names(accuracy_comparison) <- c(\n  \"All assumptions met\",\n  \"Linearity assumption violated\",\n  \"Normality assumption violated\"\n)\ncolnames(accuracy_comparison) <- \"Accuracy\"\naccuracy_comparison\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                              Accuracy\nAll assumptions met              0.873\nLinearity assumption violated    0.777\nNormality assumption violated    0.814\n```\n:::\n:::\n\n\n## Conclusion\n\nThe implementation of Probit Regression where all assumptions are met performs the best; i.e. it gives us predictions which are more accurate to the true outcome values.\n",
    "supporting": [
      "probit_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}