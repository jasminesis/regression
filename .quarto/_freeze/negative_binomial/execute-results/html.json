{
  "hash": "16e648ac918489652f163b06d66fe632",
  "result": {
    "markdown": "---\ntitle: \"Negative Binomial\"\n---\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nNegative Binomial Regression is used for predicting count data, similar to Poisson Regression, but the Negative Binomial is more flexible as it allows for the variance of the outcome to be greater than its mean (in Poisson Regression, they are assumed to be equal).\n\n## Uses\n\nNegative Binomial Regression is used to model count data with excess zeros (as in the Zero-Inflated Negative Binomial Regression) and is used to model rare events which are less likely to have counts where mean = variance. Negative Binomial can be extended to handle correlated/clustered data as well.\n\n## Assumptions\n\n-   The outcome represents count data\n-   The variance of the outcome is greater than its mean\n-   The relationship between the predictors and the log of the outcome's mean is linear\n-   The errors are independent of one another\n\n## Our Negative Binomial Regression Implementation\n\nOur Negative Binomial Regression implementation: (Note that we use bootstrapping to estimate standard errors)\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nnegative_binomial_regression <- function(data, ..., y) {\n  n <- nrow(data)\n  x_parameters <- c(...)\n  # defining the predictor matrix\n  X <-\n    matrix(c(rep(1, n), x_parameters),\n      nrow = n,\n      ncol = ncol(data)\n    )\n  # defining the outcome matrix\n  Y <- matrix(y, nrow = n, ncol = 1)\n  # starting with theta = 1\n  theta <- 1\n  # defining the log likelihood\n  negative_binomial.likelihood <- function(beta, X, Y = y) {\n    eta <- X %*% beta\n    mu <- exp(eta)\n    loglikelihood <-\n      sum(Y * log(mu) - (Y + 1 / theta) * log(1 + mu / theta))\n    return(loglikelihood)\n  }\n  # starting with an initial guess of the parameter values\n  initial_guess <- rep(0, ncol(X))\n  # using 'optim' to maximize the log likelihood\n  result <- optim(\n    initial_guess,\n    negative_binomial.likelihood,\n    X = X,\n    Y = Y,\n    control = list(fnscale = -1),\n    hessian = T,\n    method = NULL\n  )$par\n  # creating a vector 'estimate' for the beta coefficients\n  estimate <- result\n  # bootstrapping to estimate the standard errors\n  num_bootstraps <- 10\n  result_bootstrap <-\n    matrix(0, nrow = num_bootstraps, ncol = ncol(X))\n  for (i in 1:num_bootstraps) {\n    sample_indices <- sample(nrow(data), replace = TRUE)\n    bootstrap_data <- data[sample_indices, ]\n    X_bootstrap <-\n      matrix(\n        c(rep(1, nrow(bootstrap_data)), x_parameters),\n        nrow = nrow(bootstrap_data),\n        ncol = ncol(bootstrap_data)\n      )\n    Y_bootstrap <-\n      matrix(bootstrap_data$y,\n        nrow = nrow(bootstrap_data),\n        ncol = 1\n      )\n    initial_guess_bootstrap <-\n      matrix(0, nrow = ncol(bootstrap_data), ncol = 1)\n    result_bootstrap[i, ] <- optim(\n      initial_guess_bootstrap,\n      negative_binomial.likelihood,\n      X = X_bootstrap,\n      Y = Y_bootstrap,\n      control = list(fnscale = -1),\n      hessian = T,\n      method = NULL\n    )$par\n  }\n  # finding the standard deviation of the bootstrapped betas to find the\n  # standard error of the coefficients\n  se <- apply(result_bootstrap, 2, sd)\n  # calculating the z-statistic\n  z <- estimate / se\n  # defining the degrees of freedom\n  df <- nrow(X) - ncol(X)\n  # calculating the p-value\n  p <- 2 * pnorm(z, lower.tail = FALSE)\n  # defining the row names of the output data frame\n  rownames <- c()\n  for (i in 1:((ncol(X)) - 1)) {\n    rownames[i] <- i\n  }\n  data_to_plot <- data[, -which(colnames(data) == \"y\")]\n  data_to_plot$y_log <- log(data$y)\n  test <- list(\n    pairs(data_to_plot, main = \"Assessing Linearity of Predictors \\nwith log of Outcome\")\n  )\n  impl <- data.frame(\n    Estimate = estimate,\n    Std.Error = se,\n    z.value = z,\n    p.value = p,\n    DegOfFreedom = c(df, rep(NA, ncol(X) - 1)),\n    row.names = c(\"(Intercept)\", paste0(rep(\"x\", ncol(\n      X\n    ) - 1), rownames))\n  )\n  # returning a data frame akin to the glm probit output\n  return(list(test, impl))\n}\n```\n:::\n\n\nCreating a function to predict the outcomes based on our Negative Binomial Regression implementation.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\npredict_neg_binom <-\n  function(data, ..., y, implementation_neg_binom) {\n    n <-\n      implementation_neg_binom$DegOfFreedom[1] + nrow(implementation_neg_binom)\n    input_covariate_values <- c(...)\n    X <-\n      matrix(\n        c(rep(1, n), input_covariate_values),\n        nrow = n,\n        ncol = nrow(implementation_neg_binom)\n      )\n    Y <- matrix(y, nrow = n, ncol = 1)\n    estimate <-\n      implementation_neg_binom[1:nrow(implementation_neg_binom), 1]\n    pred <- exp(X %*% estimate)\n    return(pred)\n  }\n```\n:::\n\n\nCreating a test data set which meets all Negative Binomial Regression assumptions to check if our function works.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nx1 <- rnorm(100, mean = 0, sd = 0.5)\nx2 <- rnorm(100, mean = 0, sd = 0.5)\ny <- rnbinom(100, mu = exp(x1 + x2), size = 0.5)\ntest_neg_binom_regression_data <- data.frame(x1, x2, y)\n# to ensure that the variance of the outcome variable is greater\n# than its mean\nvar(y) > mean(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nplot(test_neg_binom_regression_data$x1, log(test_neg_binom_regression_data$y),\n  main = \"The relationship between the log of the outcome and x1 is linear (it is not apparent in this plot but our data structure captures this relationship)\", cex.main = 0.4,\n  xlab = \"x1\", ylab = \"y\"\n)\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-4-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nplot(test_neg_binom_regression_data$x2, log(test_neg_binom_regression_data$y),\n  xlab = \"x2\", ylab = \"y\",\n  main = \"The relationship between the log of the outcome and x2 is linear (it is not apparent in this plot but our data structure captures this relationship)\", cex.main = 0.4\n)\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-4-2.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\n## Testing Assumptions for Negative Binomial Regression\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\ntest_negbinom_reg <- negative_binomial_regression(test_neg_binom_regression_data,\n  test_neg_binom_regression_data$x1,\n  test_neg_binom_regression_data$x2,\n  y = test_neg_binom_regression_data$y\n)[[1]]\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-5-1.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\nUsing our implementation of Negative Binomial to fit the model and get residual measure.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nour_implementation_neg_binom <-\n  negative_binomial_regression(\n    test_neg_binom_regression_data,\n    test_neg_binom_regression_data$x1,\n    test_neg_binom_regression_data$x2,\n    y = test_neg_binom_regression_data$y\n  )[[2]]\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-6-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nour_implementation_neg_binom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              Estimate Std.Error  z.value    p.value DegOfFreedom\n(Intercept) 0.07019194 0.4237645 0.165639 0.86844102           97\nx1          1.08333669 0.7137122 1.517890 0.12904208           NA\nx2          1.08402921 0.4776059 2.269715 0.02322489           NA\n```\n:::\n:::\n\n\nComparing our output to R's output.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nr_implementation_neg_binom <-\n  summary(glm.nb(y ~ x1 + x2, data = test_neg_binom_regression_data))\nr_implementation_neg_binom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm.nb(formula = y ~ x1 + x2, data = test_neg_binom_regression_data, \n    init.theta = 0.2843070253, link = log)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-1.29425  -0.97170  -0.78659  -0.03923   1.85674  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)  \n(Intercept)  0.06525    0.21920   0.298   0.7660  \nx1           1.13741    0.48623   2.339   0.0193 *\nx2           1.08214    0.44280   2.444   0.0145 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(0.2843) family taken to be 1)\n\n    Null deviance: 86.734  on 99  degrees of freedom\nResidual deviance: 75.001  on 97  degrees of freedom\nAIC: 278.94\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  0.2843 \n          Std. Err.:  0.0718 \n\n 2 x log-likelihood:  -270.9420 \n```\n:::\n:::\n\n\nWe note that the results are similar.\n\nWe followed all assumptions of Negative Binomial Regression in regressing y on x1 and x2 using the test_neg_binom_regression_data data set. We will compare the residual of this regression to that of all the others where assumptions will be broken.\n\nThe residual for where all assumptions are met:\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nprediction_all_assumptions_met <-\n  as.numeric(\n    predict_neg_binom(\n      test_neg_binom_regression_data,\n      test_neg_binom_regression_data$x1,\n      test_neg_binom_regression_data$x2,\n      y = test_neg_binom_regression_data$y,\n      implementation_neg_binom = our_implementation_neg_binom\n    )\n  )\nresidual_all_assumptions_met <- sqrt(mean((\n  test_neg_binom_regression_data$y - prediction_all_assumptions_met\n)^2))\nresidual_all_assumptions_met # small residual\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.442564\n```\n:::\n\n```{.r .cell-code}\n# residual plot\nplot(\n  test_neg_binom_regression_data$y - prediction_all_assumptions_met,\n  ylim = c(-30, 30),\n  ylab = \"Residuals\",\n  main = \"Residual Plot: All assumptions met\",\n  pch = 16\n)\nabline(\n  h = 0,\n  col = \"red\",\n  lty = 2,\n  lwd = 3\n)\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-8-1.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\n## Breaking Assumptions\n\n### Breaking the assumption that the relationship between the predictors and the log of the outcome's mean is linear\n\nCreating a data set where, if we apply Negative Binomial regression, this assumption will be broken.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nx1 <- rnorm(100, mean = 0, sd = 0.5)\nx2 <- rnorm(100, mean = 0, sd = 0.5)\ny <- rnbinom(100, mu = exp(x1 + x2)^2, size = 0.5)\ntest_neg_binom_regression_data_not_linear <- data.frame(x1, x2, y)\n# to ensure that the variance of the outcome variable is greater\n# than its mean\nvar(y) > mean(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nplot(test_neg_binom_regression_data_not_linear$x1, log(test_neg_binom_regression_data_not_linear$y),\n  main = \"The relationship between the log of the outcome and x1 is not linear\", cex.main = 0.8,\n  xlab = \"x1\", ylab = \"y\"\n)\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-9-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nplot(test_neg_binom_regression_data_not_linear$x2, log(test_neg_binom_regression_data_not_linear$y),\n  xlab = \"x2\", ylab = \"y\", cex.main = 0.8,\n  main = \"The relationship between the log of the outcome and x2 is not linear\"\n)\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-9-2.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\nUsing our implementation of Negative Binomial to fit the model and get a residual measure.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nour_implementation_neg_binom_not_linear <-\n  negative_binomial_regression(\n    test_neg_binom_regression_data_not_linear,\n    test_neg_binom_regression_data_not_linear$x1,\n    test_neg_binom_regression_data_not_linear$x2,\n    y = test_neg_binom_regression_data_not_linear$y\n  )[[2]]\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-10-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nprediction_not_linear <-\n  as.numeric(\n    predict_neg_binom(\n      test_neg_binom_regression_data_not_linear,\n      test_neg_binom_regression_data_not_linear$x1,\n      test_neg_binom_regression_data_not_linear$x2,\n      y = test_neg_binom_regression_data_not_linear$y,\n      implementation_neg_binom = our_implementation_neg_binom_not_linear\n    )\n  )\nresidual_not_linear <- sqrt(mean((\n  test_neg_binom_regression_data_not_linear$y - prediction_not_linear\n)^2))\nresidual_not_linear # large residual\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.155735\n```\n:::\n\n```{.r .cell-code}\n# residual plot\nplot(\n  test_neg_binom_regression_data_not_linear$y - prediction_not_linear,\n  ylim = c(-30, 30),\n  ylab = \"Residuals\",\n  main = \"Residual Plot: Linearity assumption violated\",\n  pch = 16\n)\nabline(\n  h = 0,\n  col = \"red\",\n  lty = 2,\n  lwd = 3\n)\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-10-2.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\n### Breaking the assumption that the mean of the outcome is smaller than its variance\n\nCreating a data set where, if we apply Negative Binomial regression, this assumption will be broken.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nx1 <- rnorm(100, mean = 0, sd = 0.5)\nx2 <- rnorm(100, mean = 0, sd = 0.5)\ny <- rnbinom(100, mu = exp(x2 - 2 * x1), size = 100) + 10\ntest_neg_binom_regression_data_mean_greater <- data.frame(x1, x2, y)\n# to ensure that the variance of the outcome variable is smaller\n# than its mean\nvar(y) > mean(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nUsing our implementation of Negative Binomial to fit the model and get a residual measure.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nour_implementation_neg_binom_mean_greater <-\n  negative_binomial_regression(\n    test_neg_binom_regression_data_mean_greater,\n    test_neg_binom_regression_data_mean_greater$x1,\n    test_neg_binom_regression_data_mean_greater$x2,\n    y = test_neg_binom_regression_data_mean_greater$y\n  )[[2]]\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-12-1.png){fig-align='left' width=8.5in}\n:::\n\n```{.r .cell-code}\nprediction_mean_greater <-\n  as.numeric(\n    predict_neg_binom(\n      test_neg_binom_regression_data_mean_greater,\n      test_neg_binom_regression_data_mean_greater$x1,\n      test_neg_binom_regression_data_mean_greater$x2,\n      y = test_neg_binom_regression_data_mean_greater$y,\n      implementation_neg_binom = our_implementation_neg_binom_mean_greater\n    )\n  )\nresidual_mean_greater <- sqrt(mean((\n  test_neg_binom_regression_data_mean_greater$y - prediction_mean_greater\n)^2))\nresidual_mean_greater\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.601529\n```\n:::\n\n```{.r .cell-code}\n# residual plot\nplot(\n  test_neg_binom_regression_data_mean_greater$y - prediction_mean_greater,\n  ylim = c(-30, 30),\n  ylab = \"Residuals\",\n  cex.main = 0.9,\n  main = \"Residual Plot: Variance of outcome greater than mean assumption violated\",\n  pch = 16\n)\nabline(\n  h = 0,\n  col = \"red\",\n  lty = 2,\n  lwd = 3\n)\n```\n\n::: {.cell-output-display}\n![](negative_binomial_files/figure-html/unnamed-chunk-12-2.png){fig-align='left' width=8.5in}\n:::\n:::\n\n\n## Comparing residuals when all assumptions were met versus not\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nresidual_comparison <-\n  t(\n    data.frame(\n      residual_all_assumptions_met,\n      residual_not_linear,\n      residual_mean_greater\n    )\n  )\nrow.names(residual_comparison) <- c(\n  \"All assumptions met\",\n  \"Linearity assumption violated\",\n  \"Variance > Mean assumption violated\"\n)\ncolnames(residual_comparison) <- \"Residuals\"\nresidual_comparison\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                    Residuals\nAll assumptions met                  3.442564\nLinearity assumption violated        7.155735\nVariance > Mean assumption violated  1.601529\n```\n:::\n:::\n\n\n## Conclusion\n\nThe implementation of Negative Binomial Regression where all assumptions are met performs well; however, even the model where an assumption is broken; i.e. where the mean of the outcome is greater than its variance, performs well too - however, it should be noted that even though its predictions might be accurate, its standard errors and p-values might be biased.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nset.seed(123)\nlibrary(alr4)\nlibrary(tidyverse)\nlibrary(MASS)\nlibrary(pscl)\nlibrary(glmbb) # for crabs data\nlibrary(kableExtra)\nlibrary(lmtest)\n```\n:::\n",
    "supporting": [
      "negative_binomial_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}